name: CI/CD Pipeline

on:
  workflow_dispatch:
  push:
    paths:
      - 'services/frontend/**'
      - 'services/user-services/**'
      - 'services/project-services/**'
      - '.github/workflows/**'
  pull_request:
    branches:
      - main

permissions:
  contents: write

env:
  TAG: build-${{ github.run_number }}
  DATABASE_URL_USERS: postgresql://postgres:postgres@localhost:5432/users_db
  DATABASE_URL_PROJECTS: postgresql://postgres:postgres@localhost:5432/projects_db

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      images_uploaded: ${{ steps.check-uploaded-images.outputs.found }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install PostgreSQL client
        run: sudo apt-get install -y postgresql-client

      - name: Set up database
        run: |
          docker run -d -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=postgres -p 5432:5432 --name postgres postgres:15
          sleep 15
          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE users_db;"
          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE projects_db;"

      - name: Detect changed services
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            frontend:
              - 'services/frontend/**'
            user-services:
              - 'services/user-services/**'
            project-services:
              - 'services/project-services/**'

      - name: Build frontend image
        if: steps.changes.outputs.frontend == 'true'
        run: |
          docker build -t stm-frontend:${TAG} ./services/frontend
          docker save stm-frontend:${TAG} > frontend.tar

      - name: Build user-services image
        if: steps.changes.outputs.user-services == 'true'
        run: |
          docker build -t stm-user:${TAG} ./services/user-services
          docker save stm-user:${TAG} > user.tar

      - name: Build project-services image
        if: steps.changes.outputs.project-services == 'true'
        run: |
          docker build -t stm-project:${TAG} ./services/project-services
          docker save stm-project:${TAG} > project.tar

      - name: Upload built images
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: docker-images
          path: |
            *.tar

      - name: Check if images were uploaded
        id: check-uploaded-images
        run: |
          count=$(ls *.tar 2>/dev/null | wc -l)
          if [ "$count" -gt 0 ]; then
            echo "found=true" >> $GITHUB_OUTPUT
          else
            echo "found=false" >> $GITHUB_OUTPUT
          fi

  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install SonarScanner CLI
        run: |
          curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonar-scanner.zip -d $HOME
          echo "$HOME/sonar-scanner-5.0.1.3006-linux/bin" >> $GITHUB_PATH

      - name: Run SonarQube Scan
        run: sonar-scanner -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  push:
    runs-on: ubuntu-latest
    if: needs.build.outputs.images_uploaded == 'true'
    needs: [build, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Configure Docker for GAR
        run: gcloud auth configure-docker ${{ secrets.GAR_REGION }}-docker.pkg.dev --quiet

      - name: Download images
        if: always()
        uses: actions/download-artifact@v4
        with:
          name: docker-images
          path: .

      - name: Load Docker images
        if: always()
        run: |
          for tar in *.tar; do
            if [ -f "$tar" ]; then
              docker load < "$tar"
            fi
          done

      - name: Tag and Push Docker images
        run: |
          for img in stm-user stm-project stm-frontend; do
            if docker image inspect ${img}:${TAG} > /dev/null 2>&1; then
              docker tag ${img}:${TAG} ${{ secrets.GAR_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GAR_REPO_NAME }}/${img}:${TAG}
              docker push ${{ secrets.GAR_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GAR_REPO_NAME }}/${img}:${TAG}
            fi
          done

  deploy:
    runs-on: ubuntu-latest
    if: needs.push.result == 'success'
    needs: push

    env:
      BUILD_ID: build-${{ github.run_number }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Git config
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"

      - name: Update Helm values.yaml image tags
        run: |
          chmod +x ./scripts/image-updater.sh
          ./scripts/image-updater.sh stm-infra/base
        env:
          BUILD_ID: ${{ env.BUILD_ID }}

      - name: Commit and Push Helm updates
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GH }}
        run: |
          git add stm-infra/base/*/values.yaml
          git commit -m "üîÅ Update Helm image tags to $TAG"
          git push origin main
