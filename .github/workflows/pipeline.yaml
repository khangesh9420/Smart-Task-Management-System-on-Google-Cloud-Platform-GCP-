name: CI/CD Pipeline

on:
  workflow_dispatch:
    inputs:
      force_services:
        description: 'Comma-separated list of services to deploy'
        required: false
  push:
    paths:
      - 'services/frontend/**'
      - 'services/user-services/**'
      - 'services/project-services/**'
      - '.github/workflows/**'
  pull_request:
    branches:
      - main

permissions:
  contents: write
  issues: write

env:
  TAG: build-${{ github.run_number }}
  DATABASE_URL_USERS: postgresql://postgres:postgres@localhost:5432/users_db
  DATABASE_URL_PROJECTS: postgresql://postgres:postgres@localhost:5432/projects_db

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      images_uploaded: ${{ steps.check-uploaded-images.outputs.found }}
      changed_services: ${{ steps.set-services.outputs.services }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install PostgreSQL client
        run: sudo apt-get install -y postgresql-client

      - name: Set up database
        run: |
          docker run -d -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=postgres -p 5432:5432 --name postgres postgres:15
          sleep 15
          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE users_db;"
          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE projects_db;"

      - name: Detect changed services
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            frontend:
              - 'services/frontend/**'
            user-services:
              - 'services/user-services/**'
            project-services:
              - 'services/project-services/**'

      - name: Set changed service list
        id: set-services
        run: |
          list="${{ github.event.inputs.force_services }}"
          if [[ -z "$list" ]]; then
            [[ "${{ steps.changes.outputs.frontend }}" == "true" ]] && list+="frontend,"
            [[ "${{ steps.changes.outputs.user-services }}" == "true" ]] && list+="user-services,"
            [[ "${{ steps.changes.outputs.project-services }}" == "true" ]] && list+="project-services,"
          fi
          list="${list%,}"
          echo "services=$list" >> $GITHUB_OUTPUT

      - name: Build frontend image
        if: contains(steps.set-services.outputs.services, 'frontend')
        run: |
          docker build -t stm-frontend:${TAG} ./services/frontend
          docker save stm-frontend:${TAG} > frontend.tar

      - name: Build user-services image
        if: contains(steps.set-services.outputs.services, 'user-services')
        run: |
          docker build -t stm-user:${TAG} ./services/user-services
          docker save stm-user:${TAG} > user.tar

      - name: Build project-services image
        if: contains(steps.set-services.outputs.services, 'project-services')
        run: |
          docker build -t stm-project:${TAG} ./services/project-services
          docker save stm-project:${TAG} > project.tar

      - name: Upload built images
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: docker-images
          path: |
            *.tar

      - name: Save changed services to file
        run: echo "${{ steps.set-services.outputs.services }}" > changed_services.txt

      - name: Upload changed services
        uses: actions/upload-artifact@v4
        with:
          name: changed-services
          path: changed_services.txt

      - name: Check if images were uploaded
        id: check-uploaded-images
        run: |
          count=$(ls *.tar 2>/dev/null | wc -l)
          if [ "$count" -gt 0 ]; then
            echo "found=true" >> $GITHUB_OUTPUT
          else
            echo "found=false" >> $GITHUB_OUTPUT
          fi

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install SonarScanner CLI
        run: |
          curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonar-scanner.zip -d $HOME
          echo "$HOME/sonar-scanner-5.0.1.3006-linux/bin" >> $GITHUB_PATH

      - name: Run SonarQube Scan
        run: sonar-scanner -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  trivy-scan:
    name: Trivy Image Scan
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release -y
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy -y

      - name: Download built images
        uses: actions/download-artifact@v4
        with:
          name: docker-images
          path: .

      - name: Load Docker images
        run: |
          for tar in *.tar; do
            [ -f "$tar" ] && docker load < "$tar"
          done

      - name: Scan Docker images with Trivy
        run: |
          failed=0
          for tar in *.tar; do
            image=$(docker load < $tar | awk '{print $NF}')
            echo "Scanning $image"
            trivy image --severity HIGH,CRITICAL --exit-code 1 --no-progress "$image" || failed=1
          done
          exit $failed

  push:
    runs-on: ubuntu-latest
    if: needs.build.outputs.images_uploaded == 'true'
    needs: [build, test]
    outputs:
      changed_services: ${{ steps.load-services.outputs.changed_services }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download changed services
        uses: actions/download-artifact@v4
        with:
          name: changed-services
          path: .

      - name: Load changed services
        id: load-services
        run: |
          if [[ -f changed_services.txt ]]; then
            content=$(cat changed_services.txt)
            echo "CHANGED_SERVICES=$content" >> $GITHUB_ENV
            echo "changed_services=$content" >> $GITHUB_OUTPUT
          else
            echo "CHANGED_SERVICES=" >> $GITHUB_ENV
            echo "changed_services=" >> $GITHUB_OUTPUT
          fi

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Configure Docker for GAR
        run: gcloud auth configure-docker ${{ secrets.GAR_REGION }}-docker.pkg.dev --quiet

      - name: Download images
        uses: actions/download-artifact@v4
        with:
          name: docker-images
          path: .

      - name: Load Docker images
        run: |
          for tar in *.tar; do
            if [ -f "$tar" ]; then
              docker load < "$tar"
            fi
          done

      - name: Tag and Push Docker images
        run: |
          IFS=',' read -ra SERVICES <<< "$CHANGED_SERVICES"
          for service in "${SERVICES[@]}"; do
            case "$service" in
              user-services) img="stm-user" ;;
              project-services) img="stm-project" ;;
              frontend) img="stm-frontend" ;;
              *) continue ;;
            esac
            docker tag ${img}:${TAG} ${{ secrets.GAR_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GAR_REPO_NAME }}/${img}:${TAG}
            docker push ${{ secrets.GAR_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GAR_REPO_NAME }}/${img}:${TAG}
          done

  deploy:
    runs-on: ubuntu-latest
    if: needs.push.result == 'success'
    needs: push
    env:
      BUILD_ID: build-${{ github.run_number }}
      CHANGED_SERVICES: ${{ needs.push.outputs.changed_services }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Git config
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"

      - name: Update Helm values.yaml image tags
        run: |
          chmod +x ./scripts/image-updater.sh
          ./scripts/image-updater.sh stm-infra/base

      - name: Commit and Push Helm updates
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GH }}
        run: |
          git add -u stm-infra/base/*/values.yaml
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Update Helm image tags to $TAG"
            git push origin main
          fi
  dast:
    name: DAST - OWASP ZAP Scan
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.14.0
        with:
          target: 'https://user.khangesh.store'
          fail_action: false
          cmd_options: '-a -T 5 -r report_html.html -J report_json.json -w report_md.md'

      - name: Upload ZAP Reports
        uses: actions/upload-artifact@v4
        with:
          name: zap-reports
          path: |
            report_html.html
            report_json.json
            report_md.md

