name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  TAG: build-${{ github.run_number }}
  DATABASE_URL_USERS: postgresql://postgres:postgres@localhost:5432/users_db
  DATABASE_URL_PROJECTS: postgresql://postgres:postgres@localhost:5432/projects_db

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install PostgreSQL client
        run: sudo apt-get install -y postgresql-client

      - name: Create databases
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE users_db;"
          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE projects_db;"

      - name: Build Docker images
        run: |
          docker build -t stm-user:${TAG} ./services/user-services
          docker build -t stm-project:${TAG} ./services/project-services
          docker build -t stm-frontend:${TAG} ./services/frontend

      - name: Save Docker images
        run: |
          docker save stm-user:${TAG} > user.tar
          docker save stm-project:${TAG} > project.tar
          docker save stm-frontend:${TAG} > frontend.tar

      - name: Upload built images as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docker-images
          path: |
            user.tar
            project.tar
            frontend.tar

  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install SonarScanner CLI
        run: |
          curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonar-scanner.zip -d $HOME
          echo "$HOME/sonar-scanner-5.0.1.3006-linux/bin" >> $GITHUB_PATH

      - name: Run SonarQube Scan
        run: sonar-scanner -Dsonar.login=${{ secrets.SONAR_TOKEN }}
      
  deploy:
    runs-on: ubuntu-latest
    needs: [build, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Configure Docker for Google Artifact Registry
        run: gcloud auth configure-docker ${{ secrets.GAR_REGION }}-docker.pkg.dev --quiet

      - name: Download built Docker images
        uses: actions/download-artifact@v4
        with:
          name: docker-images

      - name: Load Docker images
        run: |
          docker load < user.tar
          docker load < project.tar
          docker load < frontend.tar

      - name: Tag and Push Docker images
        run: |
          docker tag stm-user:${TAG} ${{ secrets.GAR_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GAR_REPO_NAME }}/stm-user:${TAG}
          docker tag stm-project:${TAG} ${{ secrets.GAR_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GAR_REPO_NAME }}/stm-project:${TAG}
          docker tag stm-frontend:${TAG} ${{ secrets.GAR_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GAR_REPO_NAME }}/stm-frontend:${TAG}

          docker push ${{ secrets.GAR_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GAR_REPO_NAME }}/stm-user:${TAG}
          docker push ${{ secrets.GAR_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GAR_REPO_NAME }}/stm-project:${TAG}
          docker push ${{ secrets.GAR_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GAR_REPO_NAME }}/stm-frontend:${TAG}

      - name: Summary
        run: echo "All Docker images pushed to GAR with tag ${TAG}"

  publish:
    runs-on: ubuntu-latest
    needs: deploy

    env:
      BUILD_ID: build-${{ github.run_number }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Git config
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"

      - name: Update Helm values.yaml image tags
        run: |
          chmod +x ./scripts/image-updater.sh
          ./scripts/image-updater.sh stm-infra/base
        env:
          BUILD_ID: ${{ env.BUILD_ID }}

      - name: Commit and Push updated Helm tags
        run: |
          git add stm-infra/base/*/values.yaml
          git commit -m "🔁 Update Helm image tags to $TAG"
          git push origin main
